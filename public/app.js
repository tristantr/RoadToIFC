// Fonction Haversine pour calculer la distance entre deux points
function haversine(lat1, lon1, lat2, lon2) {
    const R = 6371; // rayon de la Terre en km
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(dLat/2) ** 2 +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLon/2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c; // distance en km
}

// Variables globales pour stocker l'√©tat
let selectedCreateCity = null;
let selectedSearchCity = null;
let searchTimeout = null;

// API Nominatim via notre proxy (√©vite les probl√®mes CORS)
const NOMINATIM_API = '/api/nominatim';

// Fonction pour rechercher des villes via Nominatim
async function searchCities(query) {
    console.log('üîç Recherche pour:', query);
    
    if (!query || query.length < 3) {
        console.log('‚ùå Requ√™te trop courte:', query);
        return [];
    }

    try {
        const url = `${NOMINATIM_API}?q=${encodeURIComponent(query)}`;
        console.log('üåê URL Nominatim:', url);
        
        const response = await fetch(url);

        if (!response.ok) {
            throw new Error('Erreur lors de la recherche de villes');
        }

        const data = await response.json();
        console.log('üìä Donn√©es brutes Nominatim:', data);
        
        // Le serveur fait d√©j√† le filtrage, on prend tous les r√©sultats
        const cities = data;

        console.log('üèôÔ∏è Villes filtr√©es:', cities);

        // Formater les suggestions
        const formatted = cities.map(place => {
            const parts = place.display_name.split(',').map(p => p.trim());
            const cityName = parts[0]; // Premier √©l√©ment = nom de la ville
            
            // Extraire d√©partement, r√©gion, pays des derniers √©l√©ments
            const country = place.address?.country || 'France';
            const region = place.address?.state || parts[parts.length - 3] || '';
            const department = place.address?.county || place.address?.state_district || parts[parts.length - 4] || '';
            
            // Construire l'affichage simplifi√©
            let displayParts = [cityName];
            if (department && department !== region) displayParts.push(department);
            if (region) displayParts.push(region);
            if (country) displayParts.push(country);
            
            return {
                id: place.place_id,
                name: cityName,
                fullName: displayParts.join(', '),
                country: country,
                countryCode: place.address?.country_code?.toUpperCase() || 'FR',
                lat: parseFloat(place.lat),
                lon: parseFloat(place.lon)
            };
        });
        
        // Supprimer les doublons bas√©s sur le nom de ville et les coordonn√©es
        const uniqueCities = formatted.filter((city, index, array) => {
            return array.findIndex(c => 
                c.name === city.name && 
                Math.abs(c.lat - city.lat) < 0.001 && 
                Math.abs(c.lon - city.lon) < 0.001
            ) === index;
        });
        
        console.log('‚ú® Suggestions format√©es (uniques):', uniqueCities);
        return uniqueCities;
    } catch (error) {
        console.error('‚ùå Erreur de recherche Nominatim:', error);
        return [];
    }
}

// Fonction pour afficher les suggestions
function showSuggestions(suggestions, containerId, loadingId, selectCallback) {
    console.log('üìã Affichage des suggestions:', suggestions, 'dans', containerId);
    
    const container = document.getElementById(containerId);
    const loading = document.getElementById(loadingId);
    
    loading.classList.add('hidden');
    
    if (suggestions.length === 0) {
        console.log('‚ùå Aucune suggestion √† afficher');
        container.classList.add('hidden');
        return;
    }

    container.innerHTML = suggestions.map(city => `
        <div class="suggestion-item" data-city='${JSON.stringify(city)}'>
            <div class="suggestion-name">${city.name}</div>
            <div class="suggestion-full">${city.fullName}</div>
        </div>
    `).join('');

    console.log('‚úÖ HTML des suggestions g√©n√©r√©');

    // Ajouter les √©v√©nements de clic
    container.querySelectorAll('.suggestion-item').forEach(item => {
        item.addEventListener('click', () => {
            const city = JSON.parse(item.dataset.city);
            console.log('üñ±Ô∏è Ville s√©lectionn√©e:', city);
            selectCallback(city);
        });
    });

    container.classList.remove('hidden');
    console.log('üëÅÔ∏è Suggestions affich√©es');
}

// Fonction pour masquer les suggestions
function hideSuggestions(containerId) {
    document.getElementById(containerId).classList.add('hidden');
}

// Fonction pour g√©rer l'autocompl√©tion
function setupAutocomplete(inputId, suggestionsId, loadingId, selectCallback) {
    const input = document.getElementById(inputId);
    console.log('üéõÔ∏è Configuration autocompl√©tion pour:', inputId);
    
    input.addEventListener('input', async (e) => {
        const query = e.target.value;
        console.log('‚å®Ô∏è Saisie utilisateur:', query, 'dans', inputId);
        
        // Annuler la recherche pr√©c√©dente
        if (searchTimeout) {
            clearTimeout(searchTimeout);
            console.log('‚è∞ Timeout pr√©c√©dent annul√©');
        }
        
        if (query.length < 3) {
            console.log('üìè Requ√™te trop courte, masquer suggestions');
            hideSuggestions(suggestionsId);
            return;
        }

        console.log('‚è≥ Affichage du loading...');
        // Afficher le loading
        document.getElementById(loadingId).classList.remove('hidden');
        
        // D√©lai pour √©viter trop de requ√™tes
        console.log('‚è∞ D√©marrage du timeout de 300ms');
        searchTimeout = setTimeout(async () => {
            console.log('üöÄ Ex√©cution de la recherche apr√®s timeout');
            const suggestions = await searchCities(query);
            showSuggestions(suggestions, suggestionsId, loadingId, selectCallback);
        }, 300);
    });

    // Masquer les suggestions quand on clique ailleurs
    input.addEventListener('blur', () => {
        setTimeout(() => hideSuggestions(suggestionsId), 200);
    });

    input.addEventListener('focus', () => {
        if (input.value.length >= 3) {
            document.getElementById(suggestionsId).classList.remove('hidden');
        }
    });
}

// Fonction pour s√©lectionner une ville (cr√©ation)
function selectCreateCity(city) {
    selectedCreateCity = city;
    document.getElementById('city').value = city.name;
    hideSuggestions('citySuggestions');
    
    const selectedDiv = document.getElementById('selectedCity');
    selectedDiv.innerHTML = `
        <strong>Ville s√©lectionn√©e :</strong> ${city.name}, ${city.country}
        <br />
        <small>Coordonn√©es : ${city.lat.toFixed(4)}, ${city.lon.toFixed(4)}</small>
    `;
    selectedDiv.classList.remove('hidden');
}

// Fonction pour s√©lectionner une ville (recherche)
function selectSearchCity(city) {
    selectedSearchCity = city;
    document.getElementById('searchCity').value = city.name;
    hideSuggestions('searchCitySuggestions');
    
    const selectedDiv = document.getElementById('selectedSearchCity');
    const radius = document.getElementById('radius').value;
    selectedDiv.innerHTML = `
        <strong>Recherche autour de :</strong> ${city.name}, ${city.country}
        <br />
        <small>Rayon : ${radius} km</small>
    `;
    selectedDiv.classList.remove('hidden');
    
    // D√©clencher la recherche automatiquement
    searchNearby();
}

// Fonction pour afficher un message
function showMessage(elementId, message, type = 'success') {
    const element = document.getElementById(elementId);
    element.textContent = message;
    element.className = `message ${type}`;
    element.classList.remove('hidden');
    
    // Masquer le message apr√®s 5 secondes pour les succ√®s
    if (type === 'success') {
        setTimeout(() => {
            element.classList.add('hidden');
        }, 5000);
    }
}

// Fonction pour cr√©er une communaut√©
async function createCommunity(event) {
    event.preventDefault();
    
    const name = document.getElementById('name').value.trim();
    const btn = document.getElementById('createBtn');
    
    if (!name) {
        showMessage('createMessage', 'Le nom de la communaut√© est requis', 'error');
        return;
    }
    
    if (!selectedCreateCity) {
        showMessage('createMessage', 'Veuillez s√©lectionner une ville dans la liste', 'error');
        return;
    }

    btn.disabled = true;
    btn.textContent = 'Cr√©ation...';

    try {
        const response = await fetch('/api/communities', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                name: name,
                city: selectedCreateCity.name,
                country: selectedCreateCity.countryCode,
                lat: selectedCreateCity.lat,
                lon: selectedCreateCity.lon
            }),
        });

        if (!response.ok) {
            throw new Error('Erreur lors de la cr√©ation de la communaut√©');
        }

        const newCommunity = await response.json();
        
        showMessage('createMessage', 'Communaut√© cr√©√©e avec succ√®s !', 'success');
        
        // R√©initialiser le formulaire
        document.getElementById('createForm').reset();
        selectedCreateCity = null;
        document.getElementById('selectedCity').classList.add('hidden');
        
        // Mettre √† jour la recherche si une ville est s√©lectionn√©e
        if (selectedSearchCity) {
            searchNearby();
        }
        
    } catch (error) {
        showMessage('createMessage', error.message, 'error');
    } finally {
        btn.disabled = false;
        btn.textContent = 'Cr√©er la communaut√©';
    }
}

// Fonction pour rechercher des communaut√©s √† proximit√©
async function searchNearby() {
    if (!selectedSearchCity) {
        return;
    }

    const radius = document.getElementById('radius').value;
    const loading = document.getElementById('searchLoading');
    const error = document.getElementById('searchError');
    const noResults = document.getElementById('noResults');
    const results = document.getElementById('results');

    // Masquer tous les √©l√©ments de r√©sultat
    [error, noResults, results].forEach(el => el.classList.add('hidden'));
    loading.classList.remove('hidden');

    try {
        const response = await fetch(
            `/api/communities/near?lat=${selectedSearchCity.lat}&lon=${selectedSearchCity.lon}&radiusKm=${radius}`
        );

        if (!response.ok) {
            throw new Error('Erreur lors de la recherche des communaut√©s');
        }

        const communities = await response.json();
        
        loading.classList.add('hidden');
        
        if (communities.length === 0) {
            noResults.innerHTML = `
                Aucune communaut√© trouv√©e dans un rayon de ${radius} km autour de ${selectedSearchCity.name}.
            `;
            noResults.classList.remove('hidden');
            return;
        }

        // Calculer les distances c√¥t√© frontend pour l'affichage
        const communitiesWithDistance = communities.map(community => ({
            ...community,
            displayDistance: haversine(selectedSearchCity.lat, selectedSearchCity.lon, community.lat, community.lon)
        }));

        // Afficher les r√©sultats
        document.getElementById('resultsTitle').textContent = `Communaut√©s trouv√©es (${communities.length})`;
        
        const listContainer = document.getElementById('communitiesList');
        listContainer.innerHTML = communitiesWithDistance.map(community => `
            <div class="community-item">
                <div class="community-header">
                    <h4>${community.name}</h4>
                    <span class="distance">
                        ${community.displayDistance.toFixed(1)} km
                    </span>
                </div>
                <div class="community-location">
                    üìç ${community.city}, ${community.country}
                </div>
                <div class="community-coords">
                    <small>
                        Coordonn√©es : ${community.lat.toFixed(4)}, ${community.lon.toFixed(4)}
                    </small>
                </div>
            </div>
        `).join('');

        results.classList.remove('hidden');
        
    } catch (err) {
        loading.classList.add('hidden');
        error.textContent = err.message;
        error.classList.remove('hidden');
    }
}

// Initialisation de l'application
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ Initialisation de l\'application...');
    
    // Configuration de l'autocompl√©tion pour la cr√©ation
    console.log('üèóÔ∏è Configuration autocompl√©tion cr√©ation...');
    setupAutocomplete('city', 'citySuggestions', 'cityLoading', selectCreateCity);
    
    // Configuration de l'autocompl√©tion pour la recherche
    console.log('üîç Configuration autocompl√©tion recherche...');
    setupAutocomplete('searchCity', 'searchCitySuggestions', 'searchCityLoading', selectSearchCity);
    
    // Gestion du formulaire de cr√©ation
    document.getElementById('createForm').addEventListener('submit', createCommunity);
    
    // Gestion du slider de rayon - mise √† jour temps r√©el
    const radiusSlider = document.getElementById('radius');
    const radiusValue = document.getElementById('radiusValue');
    
    // Mise √† jour de l'affichage de la valeur en temps r√©el
    radiusSlider.addEventListener('input', () => {
        radiusValue.textContent = radiusSlider.value;
        
        if (selectedSearchCity) {
            // Mettre √† jour l'affichage du rayon s√©lectionn√©
            const selectedDiv = document.getElementById('selectedSearchCity');
            selectedDiv.innerHTML = `
                <strong>Recherche autour de :</strong> ${selectedSearchCity.name}, ${selectedSearchCity.country}
                <br />
                <small>Rayon : ${radiusSlider.value} km</small>
            `;
        }
    });
    
    // Recherche automatique quand on rel√¢che le slider
    radiusSlider.addEventListener('change', () => {
        if (selectedSearchCity) {
            searchNearby();
        }
    });
    
    // R√©initialiser la s√©lection de ville quand on tape dans le champ
    document.getElementById('city').addEventListener('input', () => {
        selectedCreateCity = null;
        document.getElementById('selectedCity').classList.add('hidden');
    });
    
    document.getElementById('searchCity').addEventListener('input', () => {
        selectedSearchCity = null;
        document.getElementById('selectedSearchCity').classList.add('hidden');
        // Masquer les r√©sultats
        ['searchError', 'noResults', 'results'].forEach(id => {
            document.getElementById(id).classList.add('hidden');
        });
    });
});

console.log('üèòÔ∏è Application Communaut√©s Locales charg√©e!');
